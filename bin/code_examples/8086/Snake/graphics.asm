segment codeglobal _write_string_exglobal _write_charglobal _write_stringglobal _draw_rectglobal _setup_video_modeglobal _set_cursor_position;void write_string_ex(uint8* message, uint8 x, uint8 y, uint8 colour, uint8 length)_write_string_ex:push bpmov bp, spmov ah, 0x13mov al, 0mov bh, 0mov bl, [bp+10] ; Colourmov cx, [bp+12] ; Lengthmov dh, [bp+8] ; ymov dl, [bp+6] ;  xpush bpmov bp, [bp+4] ; Messageint 0x10pop bppop bpret; void _write_string(uint8* message)_write_string:push bpmov bp, spmov bx, [bp+4] ; Message._continue:mov al, [bx]cmp al, 0je ._donecall _write_charinc bxjmp ._continue._done:pop bpret_write_char:push bxmov ah, 0ehmov bl, 2int 0x10pop bxret;void draw_rect(uint16 x, uint16 y, uint8 width, uint8 height, uint8 colour);_draw_rect:push bpmov bp, sp; We will adjust the width and height variables so that this routine works; Width += Xmov ax, [bp+4]add [bp+8], ax; Height += Ymov ax, [bp+6]add [bp+10], axmov ah, 0xcmov bh, 0mov al, [bp+12] ; Colourmov cx, [bp+4] ; Xmov dx, [bp+6] ; Y_draw_pixel:int 0x10cmp cx, [bp+8] ; Widthje _next_rowinc cxjmp _draw_pixel_next_row:cmp dx, [bp+10] ; Heightje ._doneinc dxmov cx, [bp+4] ; Reset Xjmp _draw_pixel._done:	pop bpret_set_cursor_position:push bpmov bp, spmov ah, 2mov dh, [bp+4] ; Rowmov dl, [bp+6] ; Columnint 0x10pop bpret_setup_video_mode:push bpmov bp, spmov ah, 0mov al, 0x13int 0x10pop bpret